name: CI
on:
  push:
  pull_request:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-latest
    if: "startsWith(github.ref, 'refs/tags/') || !contains(github.event.head_commit.message, '[skip build]')"
    env:
      PLATFORM: x64
      WIRESHARK_DIR: ${{ github.workspace }}/wireshark
      WIRESHARK_LIB_DIR: C:/wireshark-win64-libs-4.0
      WIRESHARK_BUILD_DIR: ${{ github.workspace }}/wireshark/build
      WIRESHARK_LIB_FILE_DIR: ${{ github.workspace }}/wireshark/build/run/RelWithDebInfo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          path: dissector
      - name: Checkout Wireshark
        uses: actions/checkout@v2
        with:
          repository: wireshark/wireshark
          path: wireshark
          ref: wireshark-4.0.6
      - name: Choco install Wireshark Deps
        run: choco install -y --no-progress cmake winflexbison3 strawberryperl asciidoctorj xsltproc docbook-bundle make mingw
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: 16.4
      - name: Make build dir
        run: mkdir build
        working-directory: wireshark
      - name: Configure Wireshark
        run: cmake -A x64 .. -DBUILD_wireshark=OFF
        working-directory: wireshark/build
      - run: cmake --build . --config RelWithDebInfo --target epan
        working-directory: wireshark/build
      - run: ls C:/wireshark-win64-libs-4.0
      - name: Configure dissector (Debug)
        if: "!startsWith(github.ref, 'refs/tags/') || contains(github.ref, 'beta')"
        run: cmake -S . -G Ninja -B build
        working-directory: dissector
      - name: Configure dissector (Release)
        if: "startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'beta')"
        run: cmake -DCMAKE_BUILD_TYPE=Release -S . -G Ninja -B build
        working-directory: dissector
      - name: Build dissector
        run: cmake --build build --target MC_Dissector
        working-directory: dissector
      - name: Upload dissector
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: dissector/build/mcdissector.dll

  build-linux:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') || !contains(github.event.head_commit.message, '[skip build]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Deps
        run: sudo apt-get install cmake libglib2.0 libgcrypt-dev libwireshark-dev make clang
      - name: Configure dissector (Debug)
        if: "!startsWith(github.ref, 'refs/tags/') || contains(github.ref, 'beta')"
        run: cmake -S . -B build
      - name: Configure dissector (Release)
        if: "startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'beta')"
        run: cmake -DCMAKE_BUILD_TYPE=Release -S . -B build
      - name: Build dissector
        run: make -j8
        working-directory: build
      - name: Upload dissector
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: build/mcdissector.so

  build-encryption-helper:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') || !contains(github.event.head_commit.message, '[skip build]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Chmod Gradlew
        run: chmod +x gradlew
        working-directory: encryption-helper
      - name: Build Encryption Helper
        run: ./gradlew shadowJar
        working-directory: encryption-helper
      - name: Upload Encryption Helper
        uses: actions/upload-artifact@v2
        with:
          name: encryption-helper
          path: encryption-helper/build/libs/encryption-helper-1.0-all.jar

  publish:
    needs: [ build-windows, build-linux, build-encryption-helper ]
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    permissions: write-all
    steps:
      - name: Download windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows
      - name: Download linux artifact
        uses: actions/download-artifact@v2
        with:
          name: linux
      - name: Download encryption-helper artifact
        uses: actions/download-artifact@v2
        with:
          name: encryption-helper
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') }}
      - name: Upload mcdissector.dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mcdissector.dll
          asset_name: mcdissector.dll
          asset_content_type: application/octet-stream
      - name: Upload mcdissector.so
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mcdissector.so
          asset_name: mcdissector.so
          asset_content_type: application/octet-stream
      - name: Upload encryption-helper
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./encryption-helper-1.0-all.jar
          asset_name: encryption-helper.jar
          asset_content_type: application/octet-stream
